## Creating the disk image
Followed instruction in BOCHS HOWTO
- use qemu-img to create c2.img
- fdisk c2.img to specify the geometries such as number of sectors and stuff and partition numbers.
- losetup -o 32256 /dev/loop0 c2.img
- create paritions on the image using mke2fs
- mount c2 image
	mount c2.img /mnt/C -text2 -o loop,offset=32256
- place grub files in /boot/grub
- create the menu for grub
- copy memos2 binary to c2.img
	cp memos2 /mnt/C/boot/memos-2

# make file
- First we compile stub file which is basically the multiboot header, setting up stack, and passing arguments to stack and then call the C function
- Then we use gcc to compile our C file using -no-builtin flag to make sure there is no dependency
- We link our stub file and C binary using ld and make elf binary
- We use the last command in previous section to place it in /boot

# memos2.c
- we create the structure for holding memory-map
- There is also another structure that hold the cursor values
- put function
	# copy from slides
	In this function we put the argument passed to the function in the right memory address to be shown on the screen
	The address is defined as TEXT_BUFFER_LOC which is 0xB8000
- print function
	get a pointer to an string
	Loop over all the chars in the string and print them using put function
- itoa function
	we needed a function to converting an integer to a string 
	Since we have hex values we also pass the base to the function to correctly calculate the string based on the base value.
- pad
	This is just to make sure all the addresses are shown aligned on the screen
- kmain
	This is the main function that stub calls
	We check the flag in multiboot_info_t to make sure the data that we are retrieving is valid
	We retrieve mmap_addr which points to the memory_map region and we loop over the structure till the end
	In the loop we print out he the base address and base_addr + length of the memory region
	At the end we print out total memory

